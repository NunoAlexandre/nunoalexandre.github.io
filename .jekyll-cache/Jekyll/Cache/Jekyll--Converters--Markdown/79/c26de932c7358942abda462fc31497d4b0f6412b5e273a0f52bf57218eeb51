I"½<p>In the beginning of June this year I joined <a href="https://channable.com">Channable</a> as a backend developer. After being tired of Java, I decided to dream big and look for jobs in Haskell in The Netherlands and I found this super cool successful startup. Today I will tell howâ€™s been my experience with Haskell so far.</p>

<p>If you donâ€™t know <a href="http://nunoalexandre.com/2017/06/11/why-i-care-about-haskell">why I care about Haskell</a>, you cannot imagine the little happy and giggling child that is inside me about this new job. I was a Haskell lover and evangelist within the Java world I was in before, but I never thought I would ever work with Haskell <em>for real</em>.</p>

<p>Fortunately, I was wrong and now I do have the privilege of working primarily with Haskell at <a href="https://channable.com">Channable</a>, next to Python and Scala.</p>

<p>These are the topics I will cover about my experience so far:</p>

<ul>
  <li>Tooling</li>
  <li>Documentation</li>
  <li>Community</li>
  <li>Practicality</li>
</ul>

<h3 id="tooling">Tooling</h3>

<p>By <em>tooling</em> I mean mostly IDEs and build tools.</p>

<p>In <a href="https://www.youtube.com/embed/pjIw0-xPoZ0?ecver=2">my talk on Haskell</a>, I mentioned that tooling was a downside for Haskell. My view, after production experience, is different.
If we compare almost any language tooling to Javaâ€™s, we will probably fall short. Java is the number one in the industry, therefore the tooling goes after the needs.</p>

<p>I have been used Atom with <a href="https://github.com/simonmichael/haskell-atom-setup">this setup</a> and it works like a charm. It provides all sorts of things I need and most developers need.</p>

<p>About build tools, I mentioned that once I tried setting up a few Haskell web frameworks projects and that it took forever just to get it to build. And itâ€™s true. But itâ€™s only for the first time, as thatâ€™s usually when it needs to fetch the most dependencies at once and compile them.</p>

<p>At Channable, we use <code class="highlighter-rouge">Stack</code> and it just works. I found it always easy to add or change some configuration and it always worked as I expected.</p>

<p>The bit I donâ€™t like as much is Hackage, is the Haskell libraries gateway. It starts with the lack of aesthetics, although itâ€™s not often much better elsewhere. The main problem I found is that I rarely know where to look at when checking a library page.</p>

<p>For instance, if you want to grab the library package name to add to your dependencies list, good luck! The package name is the first part of the top left corner and the latest version is the last one of the list, in the middle of the page. Once you know this it is fine, but how hard would to have the package name and latest version in a central position?</p>

<p>In conclusion, the tooling is pretty acceptable and sufficient.</p>

<h3 id="documentation">Documentation</h3>
<p>As I said above, I find hackage in need of a serious redesign. I like to read the beautiful and helpful documentation, such as we find for Elixir.</p>

<p>One really nice thing about Haskell documentation is that from a library API page you easily access the source code. That is really nice. In Scala and Python many times you just get a javadocs of a method that doesnâ€™t really satisfy your needs and there is no O(1) access to the source code.</p>

<p>I would like to see some linking between hackage and GitHub though. One thing I noticed is that often enough people authors of some library are better with computers than with people, and the documentation they provide goes close to nothing: The summary is poor and no examples or only very simple ones are provided, requiring you to go through the tests or the source code to figure it out yourself.</p>

<p>The good part is that since Haskell is strongly and statically typed, you can easily get the answers you are looking for by looking at the code. I also find the comments in the Haskell world pretty good.</p>

<p>In conclusion, I donâ€™t find Haskell documentation great but I donâ€™t find it worse than many other. Maybe my fussiness about UI can gather some people in a movement to prettify hackage.</p>

<h3 id="community">Community</h3>

<p>Before joining Channable, I never really talked with people that knew advanced Haskell and/or that used it for real applications. Thus I was curious about how they would look like.</p>

<p>I wondered if Haskell developers had conversations about Monoids, Endofunctors, Arrows, etc. Well, <em>they do</em>! And itâ€™s pretty nice, even though it can be highly overwhelming.</p>

<p>The Haskell developers I work with and others I met, share a deep enthusiasm, and I havenâ€™t spotted a sense of arrogance in any, despite what the world says.</p>

<p>My questions and lack of knowledge on some topic were always welcomed and friendly addressed.</p>

<p>Also, I had a nice beer with <a href="https://github.com/sdiehl">Stephen Diehl</a>, a big name, together with some teammates of mine. Stephen was super reachable and nice to talk with. I like this, I like small small communities, where you can easily reach everyone, no matter how known and respected they are.</p>

<p>Also, most Haskell developers I met are not just into Haskell. They all have a broad interest in programming languages, they are not stale with a single language they think that fits every single problem.</p>

<p>This is a big improvement from my experience in the Java world, where there is the feeling that nothing else besides Java is mature and worth the time.</p>

<h3 id="practicality">Practicality</h3>
<p>This is the most heard one: <em>Haskell is not practical</em>. This is plain wrong.</p>

<p>I was afraid that I wouldnâ€™t like to use Haskell at work as much as I did to play with it in my free time, but the opposite is happening.</p>

<p>I have experienced true joy while working with Haskell. Do you what it is to have a smile while working? Thatâ€™s what I have been experiencing.</p>

<p>It feels awesome to work daily with a beautiful and robust language. I find it much simpler to program in a functional style, and I love how testable every piece of code I write is.
You see, without (aka controlled) side-effects, testing becomes trivial.</p>

<p>The praise you hear about the type-system is not for nothing: it is awesome indeed and leads to correct and rock solid software.</p>

<p>Every released piece that I have worked have not let me down so far. When it compiles, and the tests are green, I trust it. And that is priceless.</p>
:ET