I"Á<blockquote>
  <p>Can we make the code that simple? It turns out that we can. We can change the ExpenseReportDAO so that it always returns a MealExpense object. If there are no meal expenses, it returns a MealExpense object that returns the per diem as its total:</p>
</blockquote>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PerDiemMealExpenses</span> <span class="kd">implements</span> <span class="nc">MealExpenses</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getTotal</span><span class="o">()</span> <span class="o">{</span>
    	<span class="c1">// return the per diem default</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<blockquote>
  <p>This is called the SPECIAL CASE PATTERN [Fowler]. You create a class or configure an object so that it handles a special case for you. When you do, the client code doesnâ€™t have to deal with exceptional behavior. That behavior is encapsulated in the special case object.</p>
</blockquote>

<p><strong>from The Clean Code, Uncle Bob Martin.</strong></p>

:ET